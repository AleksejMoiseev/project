Задание 1:
Написать программу, которая дает пользователю ввести 5 фамилий студентов, а затем
сортирует их по возрастанию.

#include "pch.h"
#include "iostream"
#include "tchar.h"
#include "stdio.h"
#include "stdlib.h"
#include "windows.h"
#include "math.h"
#include "iomanip"
using namespace std;
const size_t N = 5;

int main()
{

typedef char T[100];
T A[N];

cout << "\nEnter student names\t";
cout << endl;
for (int i = 0; i < N; i++)
	cin >> A[i];

char b; int k; 
for (int i = 1; i < N; i++)
{
	b = A[i][0]; 
	k = i - 1;
	while (k >= 0 && A[k][0] > b)
	{
		A[k + 1][0] = A[k][0];
		A[k][0] = b; 
		k--;
	}
}


for (int i = 0; i < N; i++)
	cout<<"\n familiy\t"<< A[i];
return 0;
}


Задание 2:
Есть 3 двумерных массива A, B, C. Количество строк и столбцов для них вводит пользователь с
клавиатуры для каждого из них. Реализуйте
 Создайте одномерный массив, который содержит общие значения для A, B, C
 Создайте одномерный массив, который содержит уникальные значения для A, B, C
 Создайте одномерный массив, который содержит общие значения для A и C
 Создайте одномерный массив, который содержит отрицательные значения для A, B, C
без повторений



#include "pch.h"
#include "iostream"
#include "tchar.h"
#include "stdio.h"
#include "stdlib.h"
#include "windows.h"
#include "math.h"
#include "iomanip"
using namespace std;
const size_t N = 5;

//функция печати массива
void print(int *ptr[], int n, int m)
{
cout << "\n\n";

for (int i = 0; i < n; i++)
{
	cout << endl;
	for (int j = 0; j < m; j++)
	{
		cout << setw(5) << ptr[i][j];

	}
}
}
//удаление массива
void del_arr(int *ptr[], int n)
{
for (int i = 0; i < n; i++)
{
delete[]ptr[i];

}
delete[]ptr;
}
//поиск ключа в двумерном массиве массиве
bool value_arr(int *ptr[], int n, int m, int k)
{
int i;
for (i = 0; i < n; i++)
for (int j = 0; j < m; j++)
{
if (ptr[i][j] == k) { return 1; }

	}
if (i == n) { return 0; }
}
//поиск ключа в одномерном массиве массиве
bool value1_arr(int *ptr, int n, int k)
{
int j = 0;
for (j = 0; j < n; j++)
{
if (ptr[j] == k) { return 1; }

}
if (j == n) { return 0; }
}
int *negativ_arr(int *ptr1[], int *ptr2[], int *ptr3[], int n, int m)
{

int *buf = new int[100];

int index = 0;int  index1 = 0;
for (int i = 0; i < n; i++)
	for (int j = 0; j < m; j++)
	{
		if ((value_arr(ptr2, n, m, ptr1[i][j]) == 0) && (value_arr(ptr3, n, m, ptr1[i][j]) == 0)) { buf[index] = ptr1[i][j]; index++; }
		if ((value_arr(ptr1, n, m, ptr2[i][j]) == 0) && (value_arr(ptr3, n, m, ptr2[i][j]) == 0)) { buf[index] = ptr2[i][j]; index++; }
		if ((value_arr(ptr1, n, m, ptr3[i][j]) == 0) && (value_arr(ptr2, n, m, ptr3[i][j]) == 0)) { buf[index] = ptr3[i][j]; index++; }
	}

int*buf2;
buf2 = new int[index];
for (int i = 0; i < index; i++)
{
	if ((value1_arr(buf2, index, buf[i]) == 0) && buf[i] < 0) {
		buf2[index1] = buf[i];
		cout << "\nunique items" << i << "\t" << buf2[index1]; index1++;
	}


}



return buf2;
delete[]buf;
delete[]buf2;
}
int main()
{
int m = 0, n = 0;
cout << " \nenter choice-1\t";
cin >> n;
cout << " \nenter choice-2\t";
cin >> m;

int **A; int **B; int **C; int *buf;
/////////////////////////////////////////////////////
A = new int *[n]; B = new int *[n]; C = new int *[n]; buf = new int[100];

for (int i = 0; i < m; i++)
{
	A[i] = new int[m];
	B[i] = new int[m];
	C[i] = new int[m];
}



for (int i = 0; i < n; i++)
	for (int j = 0; j < m; j++)
	{
		A[i][j] = (int)((((float)rand() / (float)RAND_MAX) * 20) -10);
		B[i][j] = (int)((((float)rand() / (float)RAND_MAX) * 20) - 10);
		C[i][j] = (int)((((float)rand() / (float)RAND_MAX) * 20) - 10);
	}
////////////////////////////////////////////////////////

print(A, n, m);

//cout << "\nbool value_arr\t" <<  value_arr(A, n, m, 9);

print(B, n, m);
print(C, n, m);
//Поиск общих элементов 2х массивов
////////////////////////////////////////////////////////
int index = 0;
for (int i = 0; i < n; i++)
	for (int j = 0; j < m; j++)
	{
		if (value_arr(B, n, m, A[i][j]) == 1) { buf[index] = A[i][j]; index++; }

	}
int index1 = 0;
int*buf1;
buf1 = new int[index];
for (int i = 0; i < index; i++)
{
	if (value1_arr(buf1, index, buf[i]) == 0) {
		buf1[index1] = buf[i];
		cout << "\nCommon elements" << i << "\t" << buf1[index1]; index1++;
	}

}
//////////////////////////////////////////////////////
//Поиск уникальных элементов в двух массивах 
/*///////////////////////////////////////////////////////
index = 0; index1 = 0;
for (int i = 0; i < n; i++)
	for (int j = 0; j < m; j++)
	{
		if (value_arr(B, n, m, A[i][j]) == 0) { buf[index] = A[i][j]; index++; }

	}
int*buf2;
buf2 = new int[index];
for (int i = 0; i < index; i++)
{
	if (value1_arr(buf2, index, buf[i]) == 0) {
		buf2[index1] = buf[i];
		cout << "\nunique items" << i << "\t" << buf2[index1]; index1++;
	}

}
*/

buf=negativ_arr(A, B, C, n, m);

//Создайте одномерный массив, который содержит отрицательные значения для A, B, C без повторений
/////*	//////////////////////////////////////////////////////////////////////////////////////////////////
/*	index = 0; index1 = 0;
for (int i = 0; i < n; i++)
for (int j = 0; j < m; j++)
{
if ((value_arr(B, n, m, A[i][j]) == 0)&& (value_arr(C, n, m, A[i][j])==0)) { buf[index] = A[i][j]; index++; }
if ((value_arr(A, n, m, B[i][j]) == 0) && (value_arr(C, n, m, B[i][j])==0)) { buf[index] = B[i][j]; index++; }
if ((value_arr(A, n, m, C[i][j]) == 0) && (value_arr(B, n, m, C[i][j])==0)) { buf[index] = C[i][j]; index++; }
}

int*buf2;
buf2 = new int[index];
for (int i = 0; i < index; i++)
{
	if ((value1_arr(buf2, index, buf[i]) == 0)&& buf[i]<0) {
		buf2[index1] = buf[i];
		cout << "\nunique items" << i << "\t" << buf2[index1]; index1++;
	}

}*/
//////////////////////////////////////////////////////////////////////////////////////////////////////
for (int i = 0; i < n; i++)
{
	delete[]A[i];
	delete[]B[i];
	delete[]C[i];
}
delete[]A;
delete[]B;
delete[]C;
delete[]buf;
delete[]buf1;
//delete[]buf2;
return 0;
}
